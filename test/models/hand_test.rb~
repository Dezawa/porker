#!/usr/local/bin/ruby
# -*- coding: utf-8 -*-
require "test/unit"
require "test_helper"
require "./hand"

=begin
ストレートフラッシュ: 同じスートで数字が連続する5枚のカードで構成されている場合 例: C7 C6 C5 C4 C3 H1 H13 H12 H11 H10 

フォー・オブ・ア・カインド: 同じ数字のカードが4枚含まれる場合 例: C10 D10 H10 S10 D5 D6 H6 S6 C6 S13 

フルハウス: 同じ数字のカード3枚と、別の同じ数字のカード2枚で構成されている場合 例: S10 H10 D10 S4 D4 H9 C9 S9 H1 C1 

フラッシュ: 同じスートのカード5枚で構成されている場合 例: H1 H12 H10 H5 H3 S13 S12 S11 S9 S6 

ストレート: 数字が連続した5枚のカードによって構成されている場合 例: S8 S7 H6 H5 S4 D6 S5 D4 H3 C2 

スリー・オブ・ア・カインド: 同じ数字の札3枚と数字の違う2枚の札から構成されている場合 例: S12 C12 D12 S5 C3 C5 H5 D5 D12 C10 

ツーペア: 同じ数の2枚組を2組と他のカード1枚で構成されている場合 例: H13 D13 C2 D2 H11 D11 S11 S10 C10 S9 

ワンペア: 同じ数字の2枚組とそれぞれ異なった数字の札3枚によって構成されている場合 例: C10 S10 S6 H4 H2 H9 C9 H1 D12 D10 

ハイカード: 上述の役が1つも成立しない場合 例: D1 D10 S9 C5 C4 C13 D12 C11 H8 H7 課題１ テキストボックスで入力データとしてカードの情報を受け付け、ポーカーの役の名前を表示するWeb ページを作成してください。 
=end

class HandTest < Test::Unit::TestCase
  must "cardに分解されるか" do
    assert_equal Hand.new("d1 D10 S9 C5 C4").
      cards.map{|card| [card.soot,card.number]},
      [["D",1],["D",10],["S",9],["C",5],["C",4]]
  end
  must "スーツ違いはcardに分解されるか" do
    assert_raise(SootViolation){ Hand.new("P1 D10 S9 C5 C4")}
  end
  must "数字違いはcardに分解されるか" do
    assert_raise(SootViolation){ Hand.new("D21 D10 S9 C5 C4")}
  end
  must "同じカードがある！" do
    assert_raise(SootViolation){ Hand.new("D10 D10 S9 C5 C4")}
  end
  must "royal strate flush" do
    assert_equal Hand::Yaku[Hand.new("D11 D12 D13 D10 D1").point],"ストレートフラッシュ"
  end
  must "strate flush" do
    assert_equal Hand::Yaku[Hand.new("D11 D12 D13 D10 D1").point],"ストレートフラッシュ"
  end
  must "four cards" do
    assert_equal Hand::Yaku[Hand.new("D1 D10 S1 C1 H1").point],"フォー・オブ・ア・カインド"
  end
  must "full_house" do
    assert_equal Hand::Yaku[Hand.new("D1 D10 S1 C1 H10").point],"フルハウス"
  end
  must "flush" do
    assert_equal Hand::Yaku[Hand.new("D1 D10 D9 D5 D4").point],"フラッシュ"
  end
  must "hi-card " do
    assert_equal Hand::Yaku[Hand.new("D1 D10 S9 C5 C4").point],"ハイカード"
  end
  must "one-pair " do
    assert_equal Hand::Yaku[Hand.new("D1 D10 S1 C5 C4").point],"ワンペア"
  end
  must "two_pair " do
    assert_equal Hand::Yaku[Hand.new("D1 D10 S1 C10 C4").point],"ツーペア"
  end
  must "three cxards " do
    assert_equal Hand::Yaku[Hand.new("D1 D10 S1 C1 C4").point],"スリー・オブ・ア・カインド"
  end
  must "strate " do
    assert_equal Hand::Yaku[Hand.new("D1 D2 S3 C5 C4").point],"ストレート"
  end
  must "roial strate " do
    assert_equal Hand.new("D1 D12 S13 C10 C11").inspect["hand"],"ストレート"
  end

  must "複数" do
    jsonstr =
      '{"cards": ["H1 H13 H12 H11 H10","H9 C9 S9 H2 C2","C13 D12 C11 H8 H7"]}'
    porker = Porker.new(jsonstr)
    assert_equal porker.hands.map(&:inspect),
      [{"card"=>"H1 H13 H12 H11 H10", "hand"=>"ストレートフラッシュ"},
       {"card"=>"H9 C9 S9 H2 C2", "hand"=>"フルハウス"},
       {"card"=>"C13 D12 C11 H8 H7", "hand"=>"ハイカード"}]
  end
  must "複数で、同じカードあり" do
    jsonstr =
      '{"cards": ["H1 H13 H12 H11 H10","H9 C9 S9 H12 C2","C13 D12 C11 H8 H7"]}'
    assert_raise( SootViolation){  porker = Porker.new(jsonstr)}
  end
  must "一番は？" do
    jsonstr =
      '{"cards": ["H1 H13 H12 H11 H10","H9 C9 S9 H2 C2","C13 D12 C11 H8 H7"]}'
    porker = Porker.new(jsonstr)
    assert_equal porker.order,
      [{"card"=>"H1 H13 H12 H11 H10", "hand"=>"ストレートフラッシュ","best"=>true},
       {"card"=>"H9 C9 S9 H2 C2", "hand"=>"フルハウス"},
       {"card"=>"C13 D12 C11 H8 H7", "hand"=>"ハイカード"}]
  end
end
